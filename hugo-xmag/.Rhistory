size = 3, alpha = 0.7,
hjust = -0.2,
fontface = "bold") + # bold
# # add a "SHAP" bar notation
# annotate("text", x = -Inf, y = -Inf, vjust = -0.2, hjust = 0, size = 3,
#          label = expression(group("|", bar(SHAP), "|"))) +
scale_color_gradient(low="#FFCC33", high="#6600CC",
breaks=c(0,1), labels=c("Low","High")) +
theme_bw() +
theme(axis.line.y = element_blank(), axis.ticks.y = element_blank(), # remove axis line
legend.position="bottom") +
geom_hline(yintercept = 0) + # the vertical line
scale_y_continuous(limits = c(-x_bound, x_bound)) +
# reverse the order of features
scale_x_discrete(limits = rev(levels(data_long$variable))
) +
labs(y = "SHAP value (impact on model output)", x = "", color = "Feature value")
return(plot1)
}
shap_result <- shap.score.rank(xgb_model = xg_mod, shap_approx = F,
X_train = X_train)
# print(shap_result$mean_shap_score)[1:10]
shap_long <- shap.prep(X_train = X_train, top_n = 10)
# make summary plot
plot.shap.summary(data_long = shap_long)
f_ranked <- names(shap_result$mean_shap_score)
xgb.plot.shap(data = X_train, model = xg_mod, features = f_ranked[1:9], n_col = 3)
serve_site()
build_site()
build_site()
getwd()
library(blogdown)
serve_site()
build_site()
getwd()
library(blogdown)
serve_site()
# blogdown::new_site(theme = 'alanorth/hugo-theme-bootstrap4-blog')
setwd("D:/liuyanguu/Blogdown/hugo-xmag/")
blogdown:::new_post_addin()
serve_site()
install.packages('leaflet')
install.packages('widgetframe')
?frameWidget
library(widgetframe)
?frameWidget
library(blogdown)
serve_site()
include_app
knitr::include_app
build_site()
library(blogdown)
serve_site()
build_site()
build_site()
library(here)
serve_site()
library(blogdown)
serve_site()
# Column Water Vapor correction - Modified script for correcting AOD measurements
# The original script is 07_feature_selection_MOD1a.R, also included in this repo.
suppressPackageStartupMessages({
library("data.table")
library("xgboost")
library("ggforce")
library("ggplot2")
library("here")
})
source(here("Code", "SHAP_funcs.R"))
rferesults_Aqua <-  readRDS(here("Intermediate", "cwv_10by10_aqua_new_f9"))
# blogdown::new_site(theme = 'alanorth/hugo-theme-bootstrap4-blog')
setwd("D:/liuyanguu/Blogdown/")
serve_site()
# blogdown::new_site(theme = 'alanorth/hugo-theme-bootstrap4-blog')
setwd(here())
serve_site()
install.packages('ggforce')
install.packages("ggforce")
package_version(ggforce)
package_version("ggforce")
package_version("ggplot2")
version()
sessionInfo()
library(blogdown)
library(here)
here()
build_site()
#51 states including Alaska and Hawaii
library(ggplot2)
library(usmap)
library(data.table)
library(ggsn) # for scale bar `scalebar`
library(ggrepel) # if need to repel labels
dt1 <- as.data.table(copy(state.x77))
dt1$state <- tolower(rownames(state.x77))
dt1 <- dt1[,.(state, Population)]
# only need state name and variable to plot in the input file:
str(dt1)
us_map <- usmap::us_map() # used to add map scale
usmap::plot_usmap(data = dt1, values = "Population", labels = T)+
labs(fill = 'State Population (1975)') +
scale_fill_gradientn(colours=rev(heat.colors(10)),na.value="grey90",
guide = guide_colourbar(barwidth = 25, barheight = 0.4,
#put legend title on top of legend
title.position = "top")) +
# map scale
ggsn::scalebar(data = us_map, dist = 500, dist_unit = "km",
border.size = 0.4, st.size = 4,
box.fill = c('black','white'),
transform = FALSE, model = "WGS84") +
# put legend at the bottom, adjust legend title and text font sizes
theme(legend.position = "bottom",
legend.title=element_text(size=12),
legend.text=element_text(size=10))
dt2 <- as.data.table(copy(state.x77))
dt2$state <- tolower(rownames(state.x77))
dt2 <- dt2[,.(state, Population)]
setkey(dt2, state)
states <- setDT(ggplot2::map_data("state"))
setkey(states, region)
# join data to map: left join states to dt2
dt2 <- dt2[states]
# data look like this:
rmarkdown::paged_table(dt2[1:500,])
# create states location and abbreviations for label
# incl `Population` (the value to plot) in the label dataset, if want to fill with color.
state_label_dt <- unique(dt2[, .(Population, x = mean(range(long)), y = mean(range(lat))), by = state])
snames <- data.table(state = tolower(state.name), abb = state.abb) # these are dataset within R
setkey(state_label_dt, state)
setkey(snames, state)
state_label_dt <- snames[state_label_dt]
# All labels for states to the right of lon = -77 will be on the right of lon = -50.
x_boundary = -77
x_limits <- c(-50, NA) # optional, for label repelling
ggplot(data = dt2, aes(x=long, y=lat, group=group))+
geom_polygon(aes(fill=Population))+
geom_path()+
scale_fill_gradientn(colours = rev(heat.colors(10)),na.value = "grey90",
guide = guide_colourbar(barwidth = 25, barheight = 0.4,
#put legend title on top of legend
title.position = "top")) +
# if need to repel labels... could further finetune
geom_label_repel(data = state_label_dt[x>=x_boundary,],
aes(x = x,y = y, label = abb, fill = Population),
arrow = arrow(length = unit(0.02, "npc"), ends = "first"),
force = 5, hjust = 1, size = 3,
xlim  = x_limits, inherit.aes = F
) +
# the normal labels:
geom_text(data=state_label_dt[x<x_boundary,], aes(x=x,y=y, label=abb),
size=3, inherit.aes=F) +
coord_map() +
theme_classic() +
labs(fill = "Population", x = "Longitude", y = "Latitude") +
# map scale
ggsn::scalebar(data = dt2, dist = 500, dist_unit = "km",
border.size = 0.4, st.size = 4,
box.fill = c('black','white'),
transform = TRUE, model = "WGS84") +
# put legend at the bottom, adjust legend title and text font sizes
theme(legend.position = "bottom",
legend.title=element_text(size=12),  # font size of the legend
legend.text=element_text(size=10),
axis.title.x=element_blank(),  # remove axis, title, ticks
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.line=element_blank())
local_fir_dir <- "D:/OneDrive/David/China.shp/" # local the .shp file is stored
# China -------------------------------------------------------------------
library(maptools)
local_fir_dir <- "D:/OneDrive/David/China.shp/" # local the .shp file is stored
china_map <- rgdal::readOGR(paste0(local_fir_dir, "bou2_4p.shp"))
# extract province information from shap file
china_province = setDT(china_map@data)
setnames(china_province, "NAME", "province")
# transform to UTF-8 coding format
china_province[, province:=iconv(province, from = "GBK", to = "UTF-8")]
# create id to join province back to lat and long, id = 0 ~ 924
china_province[, id:= .I-1]
# there are more shapes for one province due to small islands
china_province[, table(province)]
china_province[, province:= as.factor(province)]
dt_china = setDT(fortify(china_map))
dt_china[, id:= as.numeric(id)]
setkey(china_province, id); setkey(dt_china, id)
dt_china <- china_province[dt_china]
# make the province EN, CH label file
province_CH <- china_province[, levels(province)] # the CH are in UTF-8 code
province_EN <- c("Shanghai", "Yunnan", "Inner Mongolia", "Beijing", "Taiwan",
"Jilin", "Sichuan", "Tianjin City", "Ningxia", "Anhui",
"Shandong", "Shanxi", "Guangdong", "Guangxi ", "Xinjiang",
"Jiangsu", "Jiangxi", "Hebei", "Henan", "Zhejiang",
"Hainan", "Hubei", "Hunan", "Gansu", "Fujian",
"Tibet", "Guizhou", "Liaoning", "Chongqing", "Shaanxi",
"Qinghai", "Hong Kong", "Heilongjiang"
)
# some population data (from years ago too)
value <- c(8893483, 12695396,  8470472,  7355291, 23193638,  9162183, 26383458,  3963604,  1945064, 19322432, 30794664, 10654162, 32222752, 13467663,  6902850, 25635291, 11847841, 20813492, 26404973, 20060115, 2451819, 17253385, 19029894,  7113833, 11971873,   689521, 10745630, 15334912, 10272559, 11084516, 1586635,  7026400, 13192935)
input_data <- data.table(province_CH, province_EN, value)
setkey(input_data, province_CH)
setkey(dt_china, province)
# remove small islands on the South China Sea
china_map_pop <- input_data[dt_china[AREA>0.1,]]
# create label file of province `label_dt`
label_dt <- china_map_pop[, .(x = mean(range(long)), y = mean(range(lat)), province_EN, province_CH), by = id]
label_dt <- unique(label_dt)
setkey(label_dt, province_EN)
# I have fine-tuned the label position of some provinces
label_dt['Inner Mongolia', `:=` (x = 110, y = 42)]
label_dt['Gansu', `:=` (x = 96.3, y = 40)]
label_dt['Hebei', `:=` (x = 115.5, y = 38.5)]
label_dt['Liaoning', `:=` (x = 123, y = 41.5)]
# data look like this:
rmarkdown::paged_table(china_map_pop[!is.na(province_CH),])
# plot
ggplot(china_map_pop, aes(x = long, y = lat, group = group, fill=value)) +
labs(fill = "Population (outdated)")+
geom_polygon()+
geom_path()+
scale_fill_gradientn(colours=rev(heat.colors(10)),na.value="grey90",
guide = guide_colourbar(barwidth = 0.8, barheight = 10)) +
blank() +
geom_text(data = label_dt, aes(x=x, y=y, label = province_EN),inherit.aes = F) +
scalebar(data = china_map_pop, dist = 500, dist_unit = "km",
transform = T, model = "WGS84",
border.size = 0.4, st.size = 2)
ggplot(china_map_pop, aes(x = long, y = lat, group = group, fill=value)) +
labs(fill = "Population")+
geom_polygon()+
geom_path()+
scale_fill_gradientn(colours=rev(heat.colors(10)),na.value="grey90") +
blank() +
geom_text(data = label_dt, aes(x=x, y=y, label = province_CH),inherit.aes = F) +
scalebar(data = china_map_pop, dist = 500, dist_unit = "km",
transform = T, model = "WGS84",
border.size = 0.4, st.size = 2)
build_site()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
library(blogdown)
library(here)
here()
build_site()
build_site()
build_site()
blogdown:::insert_image_addin()
# interaction feature j: Column_WV
i_feature = "AOT_Uncertainty"
j_feature = "Column_WV"
#
# plot.shap.dependence.color(data_long = shap_long_mod, x = i_feature, y_shap = i_feature, color_feature = j_feature)
plot.shap.interact <- function(i_feature, j_feature, plot_main){
xgb_mod2 <- rfe.fit(X = as.matrix(dataX[,-..j_feature]), Y = as.matrix(dataXY_df[[y_var]]), xgb_param = param_dart)
shap_values_mod2 <- shap.score.rank(xgb_model = xgb_mod2, X_train = dataX[,-..j_feature])
shap_long_mod2 <- shap.long.data.prep(shap_values_mod2, dataX[,-..j_feature])
# the original shap
data_i <- shap_long_mod[variable == i_feature,]   # fit w j
data_i2 <- shap_long_mod2[variable == i_feature,]  # fit w/o j
data_i$main_effect <- data_i2$value
data_i[, int_effect := value - main_effect]
data_i$color_value <- shap_long_mod[variable == j_feature, rfvalue]
# the SHAP range
i_feature_range <- range(data_i$value)
plot.shap.interact.core <- function(main){
if (main) y0 = "main_effect" else y0 = "int_effect"
if (main) ylab = paste0("SHAP main effect for ", label.feature(i_feature)) else ylab  = paste0("SHAP interaction value for\n", label.feature(i_feature), " and ", label.feature(j_feature))
plot1 <- ggplot(data = data_i,
aes_string(x = "rfvalue", y = y0, color = "color_value"))+
geom_point(size = 0.2, alpha = 0.6)+
# a loess smoothing line:
geom_smooth(method = 'loess', color = 'red', size = 0.4, se = F) +
labs(y = ylab,
x = label.feature(i_feature),
color = paste0(label.feature(j_feature),"\n","(Feature value)")) +
scale_color_gradient(low="#FFCC33", high="#6600CC",
guide = guide_colorbar(barwidth = 10, barheight = 0.3)) +
# scale_y_continuous(limits = i_feature_range) +
theme_bw() +
theme(legend.position="bottom",
legend.title=element_text(size=10),
legend.text=element_text(size=8)) +
ggtitle(if(main)"Main Effect"else"Interaction Effect")
plot1
}
plot1 <- plot.shap.interact.core(main = T)
plot2 <- plot.shap.interact.core(main = F)
return(if(plot_main)  grid.arrange(plot1, plot2, ncol=2) else plot2)
}
plot.shap.interact(i_feature, j_feature, T)
#
# fig_list <- lapply(var_list_a, plot.shap.interact, i_feature = "Column_WV",
#                    plot_main  = F)
# fig_grid_a <- grid.arrange(grobs = fig_list, ncol = 2)
# ggsave(fig_grid_a, file = here("Figure", paste0(date0,"_Interaction_by_Feature_terra.png")), width = 6, height = 10)
source(here::here("Code","prepare_data_model.R"))
# show that rowSum is the output
shap_data <- copy(shap_values_mod$shap_score)
shap_data[, BIAS := shap_values_mod$BIAS0]
shap_data[, `:=`(rowSum = round(rowSums(shap_data),6), pred_mod = round(pred_mod,6))]
rmarkdown::paged_table(shap_data[1:30,])
# interaction feature j: Column_WV
i_feature = "AOT_Uncertainty"
j_feature = "Column_WV"
#
# plot.shap.dependence.color(data_long = shap_long_mod, x = i_feature, y_shap = i_feature, color_feature = j_feature)
plot.shap.interact <- function(i_feature, j_feature, plot_main){
xgb_mod2 <- rfe.fit(X = as.matrix(dataX[,-..j_feature]), Y = as.matrix(dataXY_df[[y_var]]), xgb_param = param_dart)
shap_values_mod2 <- shap.score.rank(xgb_model = xgb_mod2, X_train = dataX[,-..j_feature])
shap_long_mod2 <- shap.long.data.prep(shap_values_mod2, dataX[,-..j_feature])
# the original shap
data_i <- shap_long_mod[variable == i_feature,]   # fit w j
data_i2 <- shap_long_mod2[variable == i_feature,]  # fit w/o j
data_i$main_effect <- data_i2$value
data_i[, int_effect := value - main_effect]
data_i$color_value <- shap_long_mod[variable == j_feature, rfvalue]
# the SHAP range
i_feature_range <- range(data_i$value)
plot.shap.interact.core <- function(main){
if (main) y0 = "main_effect" else y0 = "int_effect"
if (main) ylab = paste0("SHAP main effect for ", label.feature(i_feature)) else ylab  = paste0("SHAP interaction value for\n", label.feature(i_feature), " and ", label.feature(j_feature))
plot1 <- ggplot(data = data_i,
aes_string(x = "rfvalue", y = y0, color = "color_value"))+
geom_point(size = 0.2, alpha = 0.6)+
# a loess smoothing line:
geom_smooth(method = 'loess', color = 'red', size = 0.4, se = F) +
labs(y = ylab,
x = label.feature(i_feature),
color = paste0(label.feature(j_feature),"\n","(Feature value)")) +
scale_color_gradient(low="#FFCC33", high="#6600CC",
guide = guide_colorbar(barwidth = 10, barheight = 0.3)) +
# scale_y_continuous(limits = i_feature_range) +
theme_bw() +
theme(legend.position="bottom",
legend.title=element_text(size=10),
legend.text=element_text(size=8)) +
ggtitle(if(main)"Main Effect"else"Interaction Effect")
plot1
}
plot1 <- plot.shap.interact.core(main = T)
plot2 <- plot.shap.interact.core(main = F)
return(if(plot_main)  grid.arrange(plot1, plot2, ncol=2) else plot2)
}
plot.shap.interact(i_feature, j_feature, T)
#
# fig_list <- lapply(var_list_a, plot.shap.interact, i_feature = "Column_WV",
#                    plot_main  = F)
# fig_grid_a <- grid.arrange(grobs = fig_list, ncol = 2)
# ggsave(fig_grid_a, file = here("Figure", paste0(date0,"_Interaction_by_Feature_terra.png")), width = 6, height = 10)
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
library(blogdown)
build_site()
packageVersion('ggforce')
library(grid)
here
here("Code", "SHAP_funcs.R")
# interaction feature j: Column_WV
#
# plot.shap.dependence.color(data_long = shap_long_mod, x = i_feature, y_shap = i_feature, color_feature = j_feature)
plot.shap.interact <- function(i_feature, j_feature, plot_main = F){
xgb_mod2 <- rfe.fit(X = as.matrix(dataX[,-..j_feature]), Y = as.matrix(dataXY_df[[y_var]]), xgb_param = param_dart)
shap_values_mod2 <- shap.score.rank(xgb_model = xgb_mod2, X_train = dataX[,-..j_feature])
shap_long_mod2 <- shap.long.data.prep(shap_values_mod2, dataX[,-..j_feature])
# the original shap
data_i <- shap_long_mod[variable == i_feature,]   # fit w j
data_i2 <- shap_long_mod2[variable == i_feature,]  # fit w/o j
data_i$main_effect <- data_i2$value
data_i[, int_effect := value - main_effect]
data_i$color_value <- shap_long_mod[variable == j_feature, rfvalue]
# the SHAP range
i_feature_range <- range(data_i$value)
plot.shap.interact.core <- function(main){
if (main) y0 = "main_effect" else y0 = "int_effect"
if (main) ylab = paste0("SHAP main effect for ", label.feature(i_feature)) else ylab  = paste0("SHAP interaction value for\n", label.feature(i_feature), " and ", label.feature(j_feature))
plot1 <- ggplot(data = data_i,
aes_string(x = "rfvalue", y = y0, color = "color_value"))+
geom_point(size = 0.2, alpha = 0.6)+
# a loess smoothing line:
geom_smooth(method = 'loess', color = 'red', size = 0.4, se = F) +
labs(y = ylab,
x = label.feature(i_feature),
color = paste0(label.feature(j_feature),"\n","(Feature value)")) +
scale_color_gradient(low="#FFCC33", high="#6600CC",
guide = guide_colorbar(barwidth = 10, barheight = 0.3)) +
# scale_y_continuous(limits = i_feature_range) +
theme_bw() +
theme(legend.position="bottom",
legend.title=element_text(size=10),
legend.text=element_text(size=8)) +
ggtitle(if(main)"Main Effect"else"Interaction Effect")
plot1
}
plot1 <- plot.shap.interact.core(main = T)
plot2 <- plot.shap.interact.core(main = F)
return(if(plot_main)  grid.arrange(plot1, plot2, ncol=2) else plot2)
}
int1 = plot.shap.interact(i_feature = "dayint", j_feature = "Column_WV")
int2 = plot.shap.interact(i_feature = "Column_WV", j_feature = "AOT_Uncertainty")
#
# fig_list <- lapply(var_list_a, plot.shap.interact, i_feature = "Column_WV",
#                    plot_main  = F)
# fig_grid_a <- grid.arrange(grobs = fig_list, ncol = 2)
# ggsave(fig_grid_a, file = here("Figure", paste0(date0,"_Interaction_by_Feature_terra.png")), width = 6, height = 10)
int1 = plot.shap.interact(i_feature = "dayint", j_feature = "Column_WV")
int2 = plot.shap.interact(i_feature = "Column_WV", j_feature = "AOT_Uncertainty")
grid.arrange(grobs = list(int1, int2), ncol = 2)
library("shapforxgboost")
library("SHAPforxgboost")
if (!dir.exists(here("Figure/"))) dir.create(here("Figure/"))
y_var <-  "diffcwv"
date0 <- format(Sys.Date(), "%y_%m_%d")
rferesults_terra <- dataXY_df
data("dataXY_df")
dataX <- dataXY_df[,-..y_var]
# hyperparameter tuning results
param_dart <- list(objective = "reg:linear",  # For regression
nrounds = 366,
eta = 0.018,
max_depth = 10,
gamma = 0.009,
subsample = 0.98,
colsample_bytree = 0.86)
xgb_mod <- rfe.fit(X = as.matrix(dataX), Y = as.matrix(dataXY_df[[y_var]]), xgb_param = param_dart)
SHAPforxgboost::rfe.fit
# hyperparameter tuning results
param_dart <- list(objective = "reg:linear",  # For regression
nrounds = 366,
eta = 0.018,
max_depth = 10,
gamma = 0.009,
subsample = 0.98,
colsample_bytree = 0.86)
# to get shap_long directly from model
shap_values_mod <- shap.score.rank(xgb_model = xgb_mod, X_train = dataX)
library("SHAPforxgboost")
if (!dir.exists(here("Figure/"))) dir.create(here("Figure/"))
y_var <-  "diffcwv"
date0 <- format(Sys.Date(), "%y_%m_%d")
data("dataXY_df")
dataX <- dataXY_df[,-..y_var]
# hyperparameter tuning results
param_dart <- list(objective = "reg:linear",  # For regression
nrounds = 366,
eta = 0.018,
max_depth = 10,
gamma = 0.009,
subsample = 0.98,
colsample_bytree = 0.86)
xgb_mod <- rfe.fit(X = as.matrix(dataX), Y = as.matrix(dataXY_df[[y_var]]), xgb_param = param_dart)
library("SHAPforxgboost")
SHAPforxgboost
remove.packages("SHAPforxgboost", lib="~/R/win-library/3.5")
library("SHAPforxgboost")
if (!dir.exists(here("Figure/"))) dir.create(here("Figure/"))
y_var <-  "diffcwv"
date0 <- format(Sys.Date(), "%y_%m_%d")
data("dataXY_df")
dataX <- dataXY_df[,-..y_var]
# hyperparameter tuning results
param_dart <- list(objective = "reg:linear",  # For regression
nrounds = 366,
eta = 0.018,
max_depth = 10,
gamma = 0.009,
subsample = 0.98,
colsample_bytree = 0.86)
if (!dir.exists(here("Figure/"))) dir.create(here("Figure/"))
y_var <-  "diffcwv"
date0 <- format(Sys.Date(), "%y_%m_%d")
data("dataXY_df")
dataX <- dataXY_df[,-..y_var]
# hyperparameter tuning results
param_dart <- list(objective = "reg:linear",  # For regression
nrounds = 366,
eta = 0.018,
max_depth = 10,
gamma = 0.009,
subsample = 0.98,
colsample_bytree = 0.86)
xgb_mod <- rfe.fit(X = as.matrix(dataX), Y = as.matrix(dataXY_df[[y_var]]), xgb_param = param_dart)
# or if the SHAP values were already calculated during cross-validation process, as in my case:
shap_score <- rferesults_terra$shap_score
shap_score
rferesults_terra <- readRDS(here("Intermediate/cwv_10by10_terra_new_f9"))
# model A
d <- as.data.table(cbind(Fever = c(0,0,1,1),
Cough = c(0,1,0,1),
y = c(0,0,0,80)
))
X1 = as.matrix(d[,.(Fever, Cough)])
X2 = as.matrix(d[,.(Cough, Fever)])
set.seed(1234)
m1 = xgboost(
data = X1, label = d$y,base_score = 0, gamma = 0, eta = 1, lambda = 0,nrounds = 1,objective = "reg:linear", verbose = F)
shap_m <- shap.score.rank(m1, X1)
library(SHAPforxgboost)
y_var <-  "diffcwv"
date0 <- format(Sys.Date(), "%y_%m_%d")
library(SHAPforxgboost)
y_var <-  "diffcwv"
date0 <- format(Sys.Date(), "%y_%m_%d")
# Example 1 ---------------------------------------------------------------
dataX <- dataXY_df[,-..y_var]
y_var <-  "diffcwv"
date0 <- format(Sys.Date(), "%y_%m_%d")
# Example 1 ---------------------------------------------------------------
dataX <- dataXY_df[,-..y_var]
