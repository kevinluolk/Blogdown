x_boundary = -77
x_limits <- c(-50, NA) # optional, for label repelling
ggplot(data = dt2, aes(x=long, y=lat, group=group))+
geom_polygon(aes(fill=Population))+
geom_path()+
scale_fill_gradientn(colours = rev(heat.colors(10)),na.value = "grey90",
guide = guide_colourbar(barwidth = 25, barheight = 0.4,
#put legend title on top of legend
title.position = "top")) +
# if need to repel labels... could further finetune
geom_label_repel(data = state_label_dt[x>=x_boundary,],
aes(x = x,y = y, label = abb, fill = Population),
arrow = arrow(length = unit(0.02, "npc"), ends = "first"),
force = 5, hjust = 1, size = 3,
xlim  = x_limits, inherit.aes = F
) +
# the normal labels:
geom_text(data=state_label_dt[x<x_boundary,], aes(x=x,y=y, label=abb),
size=3, inherit.aes=F) +
coord_map() +
theme_classic() +
labs(fill = "Population", x = "Longitude", y = "Latitude") +
# map scale
ggsn::scalebar(data = dt2, dist = 500, dist_unit = "km",
border.size = 0.4, st.size = 4,
box.fill = c('black','white'),
transform = TRUE, model = "WGS84") +
# put legend at the bottom, adjust legend title and text font sizes
theme(legend.position = "bottom",
legend.title=element_text(size=12),  # font size of the legend
legend.text=element_text(size=10),
axis.title.x=element_blank(),  # remove axis, title, ticks
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.line=element_blank())
# China -------------------------------------------------------------------
library(maptools)
local_fir_dir <- "D:/OneDrive/David/China.shp/" # local the .shp file is stored
china_map <- rgdal::readOGR(paste0(local_fir_dir, "bou2_4p.shp"))
# extract province information from shap file
china_province = setDT(china_map@data)
setnames(china_province, "NAME", "province")
# transform to UTF-8 coding format
china_province[, province:=iconv(province, from = "GBK", to = "UTF-8")]
# create id to join province back to lat and long, id = 0 ~ 924
china_province[, id:= .I-1]
# there are more shapes for one province due to small islands
china_province[, table(province)]
china_province[, province:= as.factor(province)]
dt_china = setDT(fortify(china_map))
dt_china[, id:= as.numeric(id)]
setkey(china_province, id); setkey(dt_china, id)
dt_china <- china_province[dt_china]
# make the province EN, CH label file
province_CH <- china_province[, levels(province)] # the CH are in UTF-8 code
province_EN <- c("Shanghai", "Yunnan", "Inner Mongolia", "Beijing", "Taiwan",
"Jilin", "Sichuan", "Tianjin City", "Ningxia", "Anhui",
"Shandong", "Shanxi", "Guangdong", "Guangxi ", "Xinjiang",
"Jiangsu", "Jiangxi", "Hebei", "Henan", "Zhejiang",
"Hainan", "Hubei", "Hunan", "Gansu", "Fujian",
"Tibet", "Guizhou", "Liaoning", "Chongqing", "Shaanxi",
"Qinghai", "Hong Kong", "Heilongjiang"
)
# some population data (from years ago too)
value <- c(8893483, 12695396,  8470472,  7355291, 23193638,  9162183, 26383458,  3963604,  1945064, 19322432, 30794664, 10654162, 32222752, 13467663,  6902850, 25635291, 11847841, 20813492, 26404973, 20060115, 2451819, 17253385, 19029894,  7113833, 11971873,   689521, 10745630, 15334912, 10272559, 11084516, 1586635,  7026400, 13192935)
input_data <- data.table(province_CH, province_EN, value)
setkey(input_data, province_CH)
setkey(dt_china, province)
# remove small islands on the South China Sea
china_map_pop <- input_data[dt_china[AREA>0.1,]]
# create label file of province `label_dt`
label_dt <- china_map_pop[, .(x = mean(range(long)), y = mean(range(lat)), province_EN, province_CH), by = id]
label_dt <- unique(label_dt)
setkey(label_dt, province_EN)
# I have fine-tuned the label position of some provinces
label_dt['Inner Mongolia', `:=` (x = 110, y = 42)]
label_dt['Gansu', `:=` (x = 96.3, y = 40)]
label_dt['Hebei', `:=` (x = 115.5, y = 38.5)]
label_dt['Liaoning', `:=` (x = 123, y = 41.5)]
# data look like this:
rmarkdown::paged_table(china_map_pop[!is.na(province_CH),])
# plot
ggplot(china_map_pop, aes(x = long, y = lat, group = group, fill=value)) +
labs(fill = "Population (outdated)")+
geom_polygon()+
geom_path()+
scale_fill_gradientn(colours=rev(heat.colors(10)),na.value="grey90",
guide = guide_colourbar(barwidth = 0.8, barheight = 10)) +
blank() +
geom_text(data = label_dt, aes(x=x, y=y, label = province_EN),inherit.aes = F) +
scalebar(data = china_map_pop, dist = 500, dist_unit = "km",
transform = T, model = "WGS84",
border.size = 0.4, st.size = 2)
ggplot(china_map_pop, aes(x = long, y = lat, group = group, fill=value)) +
labs(fill = "Population")+
geom_polygon()+
geom_path()+
scale_fill_gradientn(colours=rev(heat.colors(10)),na.value="grey90") +
blank() +
geom_text(data = label_dt, aes(x=x, y=y, label = province_CH),inherit.aes = F) +
scalebar(data = china_map_pop, dist = 500, dist_unit = "km",
transform = T, model = "WGS84",
border.size = 0.4, st.size = 2)
library(leafletCN)
china_map_pop <- as.data.frame(china_map_pop)
geojsonMap(dat = china_map_pop, mapName = "china",
namevar = ~ province_CH, valuevar = ~ value,
popup =  paste0(china_map_pop$province_EN),
palette = "Reds", legendTitle = "Population")
# some quick commend to use
library(blogdown)
library(here)
here()
# blogdown::new_site(theme = 'alanorth/hugo-theme-bootstrap4-blog')
# setwd(here("hugo-xmag"))
# serve_site()
build_site()
library(rethinking)
library(blogdown)
library(here)
here()
# blogdown::new_site(theme = 'alanorth/hugo-theme-bootstrap4-blog')
# setwd(here("hugo-xmag"))
serve_site()
build_site()
build_site()
library(drake)
install.packages("drake")
blogdown:::new_post_addin()
# if needed, update drake
if(packageVersion("drake") < "7.4") install.packages("drake")
if(packageVersion("SHAPforxgboost") < "0.0.2") devtools::install_github("liuyanguu/SHAPforxgboost")
library("drake")
library("SHAPforxgboost")
here()
library("here")
data(mydata)
# if needed, update drake
if(packageVersion("drake") < "7.4") install.packages("drake")
if(packageVersion("SHAPforxgboost") < "0.0.2") devtools::install_github("liuyanguu/SHAPforxgboost")
suppressPackageStartupMessages({
library("drake")
library("SHAPforxgboost")
library("here")
})
data(SHAPforxgboost::new_labels)
data(SHAPforxgboost::dataXY_df)
(SHAPforxgboost::new_labels)
(SHAPforxgboost::dataXY_df)
dataX <- dataXY_df[,-"diffcwv"]
suppressPackageStartupMessages({
library("drake")
library("SHAPforxgboost")
library("here")
})
dataX <- dataXY_df[,-"diffcwv"]
dataX[1,]
data(dataXY_df)
dim(dataXY_df)
shap.plot.summary.wrap1
shap.prep
dim(dataX)
y_var <-  "diffcwv"
dataX <- dataXY_df[,-..y_var]
# hyperparameter tuning results
param_dart <- list(objective = "reg:linear",  # For regression
nrounds = 366,
eta = 0.018,
max_depth = 10,
gamma = 0.009,
subsample = 0.98,
colsample_bytree = 0.86)
mod <- xgboost::xgboost(data = as.matrix(dataX),
label = as.matrix(dataXY_df[[y_var]]),
xgb_param = param_dart, nrounds = param_dart$nrounds,
verbose = FALSE, nthread = parallel::detectCores() - 2,
early_stopping_rounds = 8)
# option 1: from the xgboost model
shap.plot.summary.wrap1(mod, X = dataX)
shap.plot.summary.wrap1(xgb_mod, X = dataX, top_n = 3, dilute = 10)
shap.prep
cache_path <- here("Drake_Cache")
here("Drake_Cache")
if(!dir.exists(cache_path))dir.create(cache_path)
cache <- drake_cache(path = cache_path)
cache
here()
if(!dir.exists(here("Code")))dir.create(here("Code"))
dir.exists(here("Code"))
# if needed, update drake
if(packageVersion("drake") < "7.4") install.packages("drake")
if(packageVersion("SHAPforxgboost") < "0.0.2") devtools::install_github("liuyanguu/SHAPforxgboost")
suppressPackageStartupMessages({
library("drake")
library("SHAPforxgboost")
library("here")
})
# assign a place to store intermediate objects
cache_path <- here("Drake_Cache")
if(!dir.exists(cache_path))dir.create(cache_path)
cache <- drake_cache(path = cache_path)
# assign a place for the md report
if(!dir.exists(here("Code")))dir.create(here("Code"))
get.xgb.mod <- function(dataX){
y_var <- "diffcwv"
# hyperparameter tuning results
param_dart <- list(objective = "reg:linear",  # For regression
nrounds = 366,
eta = 0.018,
max_depth = 10,
gamma = 0.009,
subsample = 0.98,
colsample_bytree = 0.86)
mod <- xgboost::xgboost(data = as.matrix(dataX),
label = as.matrix(dataXY_df[[y_var]]),
xgb_param = param_dart, nrounds = param_dart$nrounds,
verbose = FALSE, nthread = parallel::detectCores() - 2,
early_stopping_rounds = 8)
return(mod)
}
# ...
# define more functions if needed
# ...
my_plan <- drake_plan(
dataX = dataXY_df[,-"diffcwv"],
xgb_mod = get.xgb.mod(dataX),
shap_long = shap.prep(xgb_model = xgb_mod, X_train = dataX, top_n = 4),
# make a diluted (faster) summary plot showing only top 4 variables:
fig1 = shap.plot.summary(shap_long, dilute = 10),
fig2 = shap.plot.dependence(data_long = shap_long, x = 'dayint', y = 'dayint', color_feature = 'Column_WV'),
report = rmarkdown::render(
knitr_in("Code/Drake_md_report.Rmd"),
output_file = file_out("Code/Drake_md_report.html"),
output_format = rmarkdown::html_document(toc = TRUE))
)
nemia_config <- drake_config(my_plan, cache = cache) # show the dependency
# vis_drake_graph(nemia_config, from = names(nemia_config$layout))
vis_drake_graph(nemia_config)
# run the plan
make(my_plan, cache = cache)
my_plan <- drake_plan(
dataX = dataXY_df[,-"diffcwv"],
xgb_mod = get.xgb.mod(dataX),
shap_long = shap.prep(xgb_model = xgb_mod, X_train = dataX, top_n = 4),
# make a diluted (faster) summary plot showing only top 4 variables:
fig1 = shap.plot.summary(shap_long, dilute = 10),
fig2 = shap.plot.dependence(data_long = shap_long, x = 'dayint', y = 'dayint', color_feature = 'Column_WV'),
report = rmarkdown::render(
knitr_in("Code/drake_md_report.Rmd"),
output_file = file_out("Code/drake_md_report.html"),
output_format = rmarkdown::html_document(toc = TRUE))
)
nemia_config <- drake_config(my_plan, cache = cache) # show the dependency
# vis_drake_graph(nemia_config, from = names(nemia_config$layout))
vis_drake_graph(nemia_config)
# run the plan
make(my_plan, cache = cache)
here()
my_plan <- drake_plan(
dataX = dataXY_df[,-"diffcwv"],
xgb_mod = get.xgb.mod(dataX),
shap_long = shap.prep(xgb_model = xgb_mod, X_train = dataX, top_n = 4),
# make a diluted (faster) summary plot showing only top 4 variables:
fig1 = shap.plot.summary(shap_long, dilute = 10),
fig2 = shap.plot.dependence(data_long = shap_long, x = 'dayint', y = 'dayint', color_feature = 'Column_WV'),
report = rmarkdown::render(
here("Code", knitr_in("drake_md_report.Rmd")),
output_file = file_out("Code/drake_md_report.html"),
output_format = rmarkdown::html_document(toc = TRUE))
)
nemia_config <- drake_config(my_plan, cache = cache) # show the dependency
# vis_drake_graph(nemia_config, from = names(nemia_config$layout))
vis_drake_graph(nemia_config)
my_plan <- drake_plan(
dataX = dataXY_df[,-"diffcwv"],
xgb_mod = get.xgb.mod(dataX),
shap_long = shap.prep(xgb_model = xgb_mod, X_train = dataX, top_n = 4),
# make a diluted (faster) summary plot showing only top 4 variables:
fig1 = shap.plot.summary(shap_long, dilute = 10),
fig2 = shap.plot.dependence(data_long = shap_long, x = 'dayint', y = 'dayint', color_feature = 'Column_WV'),
report = rmarkdown::render(
knitr_in("Code/drake_md_report.Rmd"),
output_file = file_out("drake_md_report.html"),
output_format = rmarkdown::html_document(toc = TRUE))
)
nemia_config <- drake_config(my_plan, cache = cache) # show the dependency
# vis_drake_graph(nemia_config, from = names(nemia_config$layout))
vis_drake_graph(nemia_config)
# run the plan
make(my_plan, cache = cache)
# some quick commend to use
library(blogdown)
library(here)
here()
# blogdown::new_site(theme = 'alanorth/hugo-theme-bootstrap4-blog')
# setwd(here("hugo-xmag"))
serve_site()
build_site()
nemia_config <- drake_config(my_plan, cache = cache) # show the dependency
# vis_drake_graph(nemia_config, from = names(nemia_config$layout))
vis_drake_graph(nemia_config)
nemia_config <- drake_config(my_plan, cache = cache) # show the dependency
# vis_drake_graph(nemia_config, from = names(nemia_config$layout))
vis_drake_graph(nemia_config)
my_plan <- drake_plan(
dataX = copy(dataXY_df[,-"diffcwv"]),
xgb_mod = get.xgb.mod(dataX),
shap_long = shap.prep(xgb_model = xgb_mod, X_train = dataX, top_n = 4),
# make a diluted (faster) summary plot showing only top 4 variables:
fig1 = shap.plot.summary(shap_long, dilute = 10),
fig2 = shap.plot.dependence(data_long = shap_long, x = 'dayint', y = 'dayint', color_feature = 'Column_WV'),
report = rmarkdown::render(
knitr_in("Code/drake_md_report.Rmd"),
output_file = file_out("drake_md_report.html"),
output_format = rmarkdown::html_document(toc = TRUE))
)
nemia_config <- drake_config(my_plan, cache = cache) # show the dependency
# vis_drake_graph(nemia_config, from = names(nemia_config$layout))
vis_drake_graph(nemia_config)
# run the plan
make(my_plan, cache = cache)
my_plan <- drake_plan(
dataX = data.table::copy(dataXY_df[,-"diffcwv"]),
xgb_mod = get.xgb.mod(dataX),
shap_long = shap.prep(xgb_model = xgb_mod, X_train = dataX, top_n = 4),
# make a diluted (faster) summary plot showing only top 4 variables:
fig1 = shap.plot.summary(shap_long, dilute = 10),
fig2 = shap.plot.dependence(data_long = shap_long, x = 'dayint', y = 'dayint', color_feature = 'Column_WV'),
report = rmarkdown::render(
knitr_in("Code/drake_md_report.Rmd"),
output_file = file_out("drake_md_report.html"),
output_format = rmarkdown::html_document(toc = TRUE))
)
nemia_config <- drake_config(my_plan, cache = cache) # show the dependency
# vis_drake_graph(nemia_config, from = names(nemia_config$layout))
vis_drake_graph(nemia_config)
# run the plan
make(my_plan, cache = cache)
my_plan <- drake_plan(
dataX = data.table::copy(dataXY_df[,-"diffcwv"]),
xgb_mod = get.xgb.mod(dataX),
shap_long = shap.prep(xgb_model = xgb_mod, X_train = dataX, top_n = 4),
# make a diluted (faster) summary plot showing only top 4 variables:
fig1 = shap.plot.summary(shap_long, dilute = 10),
fig2 = shap.plot.dependence(data_long = shap_long, x = 'dayint', y = 'dayint', color_feature = 'Column_WV'),
report = rmarkdown::render(
knitr_in(here("Code", "drake_md_report.Rmd")),
output_file = file_out(here("Code", "drake_md_report.html")),
output_format = rmarkdown::html_document(toc = TRUE))
)
nemia_config <- drake_config(my_plan, cache = cache) # show the dependency
# vis_drake_graph(nemia_config, from = names(nemia_config$layout))
vis_drake_graph(nemia_config)
my_plan <- drake_plan(
dataX = data.table::copy(dataXY_df[,-"diffcwv"]),
xgb_mod = get.xgb.mod(dataX),
shap_long = shap.prep(xgb_model = xgb_mod, X_train = dataX, top_n = 4),
# make a diluted (faster) summary plot showing only top 4 variables:
fig1 = shap.plot.summary(shap_long, dilute = 10),
fig2 = shap.plot.dependence(data_long = shap_long, x = 'dayint', y = 'dayint', color_feature = 'Column_WV'),
report = rmarkdown::render(
knitr_in(here("Code", "drake_md_report.Rmd")),
output_file = file_out(here("Code", "drake_md_report.html")),
output_format = rmarkdown::html_document(toc = TRUE))
)
nemia_config <- drake_config(my_plan, cache = cache) # show the dependency
my_plan <- drake_plan(
dataX = data.table::copy(dataXY_df[,-"diffcwv"]),
xgb_mod = get.xgb.mod(dataX),
shap_long = shap.prep(xgb_model = xgb_mod, X_train = dataX, top_n = 4),
# make a diluted (faster) summary plot showing only top 4 variables:
fig1 = shap.plot.summary(shap_long, dilute = 10),
fig2 = shap.plot.dependence(data_long = shap_long, x = 'dayint', y = 'dayint', color_feature = 'Column_WV'),
report = rmarkdown::render(
knitr_in("Code/drake_md_report.Rmd"),
output_file = file_out("drake_md_report.html"),
output_format = rmarkdown::html_document(toc = TRUE))
)
nemia_config <- drake_config(my_plan, cache = cache) # show the dependency
# vis_drake_graph(nemia_config, from = names(nemia_config$layout))
vis_drake_graph(nemia_config)
my_plan <- drake_plan(
dataX = data.table::copy(dataXY_df[,-"diffcwv"]),
xgb_mod = get.xgb.mod(dataX),
shap_long = shap.prep(xgb_model = xgb_mod, X_train = dataX, top_n = 4),
# make a diluted (faster) summary plot showing only top 4 variables:
fig1 = shap.plot.summary(shap_long, dilute = 10),
fig2 = shap.plot.dependence(data_long = shap_long, x = 'dayint', y = 'dayint', color_feature = 'Column_WV'),
report = rmarkdown::render(
knitr_in("drake_md_report.Rmd"),
output_file = file_out("drake_md_report.html"),
output_format = rmarkdown::html_document(toc = TRUE))
)
nemia_config <- drake_config(my_plan, cache = cache) # show the dependency
# vis_drake_graph(nemia_config, from = names(nemia_config$layout))
vis_drake_graph(nemia_config)
my_plan <- drake_plan(
dataX = data.table::copy(dataXY_df[,-"diffcwv"]),
xgb_mod = get.xgb.mod(dataX),
shap_long = shap.prep(xgb_model = xgb_mod, X_train = dataX, top_n = 4),
# make a diluted (faster) summary plot showing only top 4 variables:
fig1 = shap.plot.summary(shap_long, dilute = 10),
fig2 = shap.plot.dependence(data_long = shap_long, x = 'dayint', y = 'dayint', color_feature = 'Column_WV'),
report = rmarkdown::render(
here("Code", knitr_in("drake_md_report.Rmd")),
output_file = file_out("drake_md_report.html"),
output_format = rmarkdown::html_document(toc = TRUE))
)
nemia_config <- drake_config(my_plan, cache = cache) # show the dependency
# vis_drake_graph(nemia_config, from = names(nemia_config$layout))
vis_drake_graph(nemia_config)
my_plan <- drake_plan(
dataX = data.table::copy(dataXY_df[,-"diffcwv"]),
xgb_mod = get.xgb.mod(dataX),
shap_long = shap.prep(xgb_model = xgb_mod, X_train = dataX, top_n = 4),
# make a diluted (faster) summary plot showing only top 4 variables:
fig1 = shap.plot.summary(shap_long, dilute = 10),
fig2 = shap.plot.dependence(data_long = shap_long, x = 'dayint', y = 'dayint', color_feature = 'Column_WV'),
report = rmarkdown::render(
knitr_in("Code/drake_md_report.Rmd"),
output_file = file_out("Code/drake_md_report.html"),
output_format = rmarkdown::html_document(toc = TRUE))
)
nemia_config <- drake_config(my_plan, cache = cache) # show the dependency
# vis_drake_graph(nemia_config, from = names(nemia_config$layout))
vis_drake_graph(nemia_config)
# run the plan
make(my_plan, cache = cache)
my_plan <- drake_plan(
dataX = data.table::copy(dataXY_df[,-"diffcwv"]),
xgb_mod = get.xgb.mod(dataX),
shap_long = shap.prep(xgb_model = xgb_mod, X_train = dataX, top_n = 4),
# make a diluted (faster) summary plot showing only top 4 variables:
fig1 = shap.plot.summary(shap_long, dilute = 10),
fig2 = shap.plot.dependence(data_long = shap_long, x = 'dayint', y = 'dayint', color_feature = 'Column_WV'),
report = rmarkdown::render(
knitr_in("Code/drake_md_report.Rmd"),
output_format = rmarkdown::html_document(toc = TRUE))
)
nemia_config <- drake_config(my_plan, cache = cache) # show the dependency
# vis_drake_graph(nemia_config, from = names(nemia_config$layout))
vis_drake_graph(nemia_config)
# run the plan
make(my_plan, cache = cache)
build_site()
my_plan <- drake_plan(
dataX = data.table::copy(dataXY_df[,-"diffcwv"]),
xgb_mod = get.xgb.mod(dataX),
shap_long = shap.prep(xgb_model = xgb_mod, X_train = dataX, top_n = 4),
# make a diluted (faster) summary plot showing only top 4 variables:
fig1 = shap.plot.summary(shap_long, dilute = 10),
fig2 = shap.plot.dependence(data_long = shap_long, x = 'dayint', y = 'dayint', color_feature = 'Column_WV'),
report = rmarkdown::render(
knitr_in(here("Code/drake_md_report.Rmd")),
output_format = rmarkdown::html_document(toc = TRUE))
)
nemia_config <- drake_config(my_plan, cache = cache) # show the dependency
# vis_drake_graph(nemia_config, from = names(nemia_config$layout))
vis_drake_graph(nemia_config)
here("Code/drake_md_report.Rmd")
nemia_config <- drake_config(my_plan, cache = cache) # show the dependency
# vis_drake_graph(nemia_config, from = names(nemia_config$layout))
vis_drake_graph(nemia_config)
my_plan <- drake_plan(
dataX = data.table::copy(dataXY_df[,-"diffcwv"]),
xgb_mod = get.xgb.mod(dataX),
shap_long = shap.prep(xgb_model = xgb_mod, X_train = dataX, top_n = 4),
# make a diluted (faster) summary plot showing only top 4 variables:
fig1 = shap.plot.summary(shap_long, dilute = 10),
fig2 = shap.plot.dependence(data_long = shap_long, x = 'dayint', y = 'dayint', color_feature = 'Column_WV'),
report = rmarkdown::render(
knitr_in("drake_md_report.Rmd"),
output_format = rmarkdown::html_document(toc = TRUE))
)
nemia_config <- drake_config(my_plan, cache = cache) # show the dependency
# vis_drake_graph(nemia_config, from = names(nemia_config$layout))
vis_drake_graph(nemia_config)
my_plan <- drake_plan(
dataX = data.table::copy(dataXY_df[,-"diffcwv"]),
xgb_mod = get.xgb.mod(dataX),
shap_long = shap.prep(xgb_model = xgb_mod, X_train = dataX, top_n = 4),
# make a diluted (faster) summary plot showing only top 4 variables:
fig1 = shap.plot.summary(shap_long, dilute = 10),
fig2 = shap.plot.dependence(data_long = shap_long, x = 'dayint', y = 'dayint', color_feature = 'Column_WV'),
report = rmarkdown::render(
knitr_in("Code/drake_md_report.Rmd"),
output_format = rmarkdown::html_document(toc = TRUE))
)
nemia_config <- drake_config(my_plan, cache = cache) # show the dependency
# vis_drake_graph(nemia_config, from = names(nemia_config$layout))
vis_drake_graph(nemia_config)
my_plan <- drake_plan(
dataX = data.table::copy(dataXY_df[,-"diffcwv"]),
xgb_mod = get.xgb.mod(dataX),
shap_long = shap.prep(xgb_model = xgb_mod, X_train = dataX, top_n = 4),
# make a diluted (faster) summary plot showing only top 4 variables:
fig1 = shap.plot.summary(shap_long, dilute = 10),
fig2 = shap.plot.dependence(data_long = shap_long, x = 'dayint', y = 'dayint', color_feature = 'Column_WV'),
report = rmarkdown::render(
knitr_in("Code/drake_md_report.Rmd"),
output_format = rmarkdown::html_document(toc = TRUE))
)
nemia_config <- drake_config(my_plan, cache = cache) # show the dependency
# vis_drake_graph(nemia_config, from = names(nemia_config$layout))
vis_drake_graph(nemia_config)
# run the plan
make(my_plan, cache = cache)
# vis_drake_graph(nemia_config, from = names(nemia_config$layout))
vis_drake_graph(nemia_config)
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
build_site()
